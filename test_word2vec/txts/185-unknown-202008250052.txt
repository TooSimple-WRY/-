HOT KNIVES THROUGH BUTTER:  Evading File-based Sandboxes.
The repeated paragraph marks push the exploit code to the second page of the RTF document .
So the malicious code does not execute unless the document scrolls down to bring the exploit code up into the active window—more likely a deliberate act by a human user than simulated movement in a virtual machine .
When the RTF is scrolled down to the second page , then only the exploit code triggers , and  as shown in Figure 5.0 , it makes a call to  URLDownloadToFileA function from the shell code to download an executable file .
In a typical file-based sandbox , where any mouse activity is random or preprogrammed , the RTF document ’s second page will never appear .
So the malicious code never executes , and nothing seems amiss in the sandbox analysis .
 Another sandbox-evading attack we spotted in recent attacks waits for two or more mouse clicks before executing .
To thwart earlier evasion techniques that detect human interaction , some sandboxes have begun programming one-time mouse clicks when executing code .
But most people click mouse buttons many times throughout the day .
By lying dormant until it detects more than two clicks , the malicious code ensures that the mouse clicks are from an actual person —not a sandbox mimicking one .
Here ’s how this technique works : 
The malware invokes the function Get AsyncKeyState in a loop .
The function checks whether any mouse buttons are clicked by looking for the parameter 0x01 , 0x02 , or 0x04 .
( The parameter 0x01 is the virtual key code for the mouse ’s left button , 0x02 is the code for the right button , and 0x04 is the code of the middle button . )
The instruction “ xor edi edi ” sets the edi to 0 .
If any of the buttons is pressed , the code invokes the instruction “ inc edi , ” as shown in Figure 7 .
After that , the  instruction “ cmp edi,2 ” checks whether the left , right or middle mouse buttons have been clicked more than two times .
If so , code exits from the loop and gets to its real work .
Otherwise , it stays under the radar , continuously checking for more mouse clicks .
Another recently discovered evasion technique involves checking for suspiciously fast mouse movement .
To make sure an actual person is controlling the mouse or trackpad , malware code checks how quickly the cursor is moving .
Superhuman speed is a telltale sign that the code is running in a sandbox .
This technique makes use of the Windows function GetCursorPos , which retrieves the system ’s cursor position .
In the example malware code shown in Figure 8 , GetCursorPos returns 614 for the x-axis value and 185 for the y-axis value .
After few instructions , malicious code again calls GetCursorPos to check whether the cursor position has changed .
This time the function returns x= 1019 and y = 259 , as shown in Figure 6 .
A few instructions after the second GetCursorPos call , the malware code  invokes the instruction “ SUB EDI , DWORD PTR DS : [410F15] ” .
As shown in the figure 9.0 , the value in EDI is 0x103 ( 259 in decimal ) and DS : [410F15] = 0xB9 ( 185 in decimal ) .
The value 259 and 185 are the Y coordinates retrieved from the two GetCursorPos calls .
If the difference between the two Y-coordinate measurements is not 0 , then the malware terminates .
In other words , if the cursor has moved between the two GetCursorPos calls ( which are only a few instructions apart ) , then the malware concludes that the mouse movement is simulated .
That ’s too fast to be a real-world mouse or track pad in normal use , so the code must be running in a sandbox .
