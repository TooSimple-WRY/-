Kazuar : Multiplatform Espionage Backdoor with API Access. 
Kazuar : Multiplatform Espionage Backdoor with API Access
Release_Time : 2017-5-3
Report_URL : https://unit42.paloaltonetworks.com/unit42-kazuar-multiplatform-espionage-backdoor-api-access/
Unit 42 researchers have uncovered a backdoor Trojan used in an espionage campaign .
The developers refer to this tool by the name Kazuar , which is a Trojan written using the Microsoft .NET Framework that offers actors complete access to compromised systems targeted by its operator .
Kazuar includes a highly functional command set , which includes the ability to remotely load additional plugins to increase the Trojan ’s capabilities .
During our analysis of this malware we uncovered interesting code paths and other artifacts that may indicate a Mac or Unix variant of this same tool also exists .
Also , we discovered a unique feature within Kazuar : it exposes its capabilities through an Application Programming Interface ( API )  to a built-in webserver .
We suspect the Kazuar tool may be linked to the Turla threat actor group ( also known as Uroburos and Snake ) , who have been reported to have compromised embassies , defense contractors , educational institutions , and research organizations across the globe .
A hallmark of Turla operations is iterations of their tools and code lineage in Kazuar can be traced back to at least 2005 .
If the hypothesis is correct and the Turla threat group is using Kazuar , we believe they may be using it as a replacement for Carbon and its derivatives .
Of the myriad of tools observed in use by Turla Carbon and its variants were typically deployed as a second stage backdoor within targeted environments and we believe Kazuar may now hold a similar role for Turla operations .
Kazuar is a fully featured backdoor written using the .NET Framework and obfuscated using the open source packer called ConfuserEx .
We used a combination of tools such as NoFuserEx , ConfuserEx Fixer , ConfuserEx Switch Killer , and de4d0t in order to deobfuscate the code for in depth analysis .
We then used dnSpy to export the code to a Microsoft Visual Studio project , so that we could rename the random method names to better understand the flow of the code .
We will describe how Kazuar works and what capabilities it offers threat actors .
The malware initializes by gathering system and malware filename information and creates a mutex to make sure only one instance of the Trojan executes on the system at a time .
Kazuar generates its mutex by using a process that begins with obtaining the MD5 hash of a string “ [username]=>singleton-instance-mutex ” .
The Trojan then encrypts this MD5 hash using an XOR algorithm and the serial number of the storage volume .
Kazuar uses the resulting ciphertext to generate a GUID that it appends to the string “ Global\\ ” to create the mutex .
An interesting artifact that we found within the mutex creation process is that if the code cannot obtain the system ’s storage serial number , it will use a static integer of 16456730 as a key to encrypt the MD5 hash .
The hexadecimal representation of 16456730 is 0xFB1C1A , which appears to be included by the malware author as a potential reference to the United States ’ FBI and CIA organizations .
The Trojan then creates a set of folders on the system to store various files created during its execution .
Kazuar creates its folders using group names , which logically organize the files contained within the folder .
base Parent folder that contains the following folder groups below .
sys	Files that Kazuar uses for configuration settings , such as the ‘ serv ’ item that stores the C2 server locations .
log	Files contain debug messages .
plg	Files are plugins used to extend the functionality of Kazuar .
tsk	Files that Kazuar will process as commands and their arguments .
res	Files contain the results of the successfully processed tasks .
The Trojan uses a similar process to create these folder and file names as it uses to generate its mutex , generating an MD5 hash of the name , using XOR on each byte using the volume serial number as a key and generating a GUID based on the ciphertext .
The resulting GUIDs are used as file and folder names , which are combined with the local system path to the %LOCALAPPDATA% folder to create Kazuar ’s folders .
Throughout its code , Kazuar verbosely logs its activities by writing debug messages to log files stored within the “ log ” folder .
Kazuar encrypts the debug messages saved in these log files using the Rijndael cipher .
We decrypted the initial entry that was added to the log files during the execution of the Trojan .
This entry reveals the following information : 
malware_file_name[2720] : Kazuar 's entry point started in process malware_file_name [2720] as user USERNAME .
The log message above shows that the malware author refers to the Trojan as “ Kazuar ” .
Interestingly , the word “ Kazuar ” appears in several languages , such as Polish , Hungarian and Slovenian , and is the ASCII form of the Russian word “ казуар ” .
The word “ Kazuar ” and казуар translates to Cassowary , which is a large flightless bird native to New Guinea and Australia .
After initial setup , the method at the main entry point of the malware .
The main entry point contains a relatively simple set of if statements that determine the execution path of the malware .
Interestingly , one of the paths appears to be for execution on a Mac or Unix host .
The four possible paths of execution taken by Kazuar ’s main entry point are as follows : 
1:If the malware was executed with the “ install ” command-line argument , which uses .NET Framwork ’s InstallHelper method to install the malware as a service .
2:If the malware is started in a non-user interactive environment ( no user interface ) , the malware installs itself as a service .
3:If no arguments are provided and the malware determines it is running in a Windows environment , it saves a DLL to the system that it injects into the explorer.exe process .
The injected DLL executable loads the malware ’s executable and runs it within memory of the explorer.exe process .
4:If the malware was executed with the “ single ” command-line argument or the malware determines its running in a Mac or Unix environment , it runs the method containing Kazuar ’s functional code and will limit certain Windows specific functionality if a Mac or Unix environment is detected .
The flow of execution is carefully guided by its operating environment , which is determined using the .NET Framework Environment.OSVersion.Platform.PlatformID enumeration .
Interestingly , we see a specific boolean variable for a PlatformID value of Unix that suggests that Kazuar might be used against Mac or Unix targets that return True for that API .
After enumerating the operating environment , Kazuar will attempt to establish persistent access to the system .
Kazuar uses the method displayed in Figure 4 within its Autorun class to set up persistence on Windows systems , which has multiple options including : Adding a shortcut ( lnk file ) to the Windows startup folder , adding a sub-key to the following paths in the current user ( HKCU ) hive . 
Adding a sub-key to the following paths in the current user ( HKCU ) hive : 
SOFTWARE\Microsoft\Windows\CurrentVersion\Run .
SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce .
SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer\Run .
SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell .
SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows\load .
The Kazuar Trojan initially relies on its command and control channel to allow actors to interact with the compromised system and to exfiltrate data .
Kazuar has the capabilities to use multiple protocols , such as HTTP , HTTPS , FTP or FTPS , determined by the prefixes of the hardcoded C2 URLs .
So far , we have only observed HTTP used as the C2 protocol in our sample set .
All of the known Kazuar C2 servers appear to be compromised WordPress blogs , suggesting that the threat group using Kazuar in attacks also locates and exploits vulnerable WordPress sites as part of their playbook .
To interact with its C2 server , Kazuar begins its communication by creating an HTTP GET request to use as a beacon .
Kazuar refers to this GUID as an “ agent ” identifier .
The initial HTTP beacon shows the base64 encoded AuthToken value within the Cookie field that we believe the C2 server uses to uniquely identify and track individual compromised hosts .
Kazuar will read the response from the C2 server and attempt to parse the response as XML formatted data .
The XML formatted data will contain what Kazuar refers to as a “ task ” , which is comprised of an action identifier and specific arguments for each action .
The action identifier is directly related to the command which the actor wishes to run on the compromised system .
Surprisingly , Kazuar also contains methods for each command to equate the action identifier to a string that describes the command , which makes determining the purpose of each command much easier .
Table 2 shows a list of available commands within Kazuar , specifically each action identifier , command string and a description .
1:log Logs a specified debug message .
2:get Upload files from a specified directory .
It appears the actor can specify which files to upload based on their modified , accessed and created timestamps as well .
3:put Writes provided data ( referred to as ‘ payload ’ ) to a specified file on the system .
4:cmd Executes a specified command and writes the output to a temporary file : The temporary file is uploaded to the C2 server : 
5:sleep	Trojan sleeps for a specified time : 
6:upgrade Upgrades the Trojan by changing the current executable ’s file extension to “ .old ” and writing a newly provided executable in its place .
7:scrshot Takes a screenshot of the entire visible screen .
The screenshot is saved to a specified filename or using a filename with the following format : [year]-[month]-[day]-[hour]-[minute]-[second]-[milisecond].jpg .
The file is uploaded to the C2 server .
8:camshot Creates a Window called “ WebCapt ” to capture an image from an attached webcam , which it copies to the clipboard and writes to a specified file or a file following the same format from the “ scrshot ” command .
The file is uploaded to the C2 server .
9:uuid Sets the unique agent identifier by providing a specific GUID .
10:interval Sets the transport intervals , specifically the minimum and maximum time intervals between C2 communications .
11:server Sets the C2 servers by providing a list of URLs .
12:transport Sets the transport processes by providing a list of processes that Kazuar will inject its code and execute within .
13:autorun Sets the autorun type as discussed earlier in this blog .
Kazuar will accept the following strings for this command : DISABLED , WINLOGON , POLICIES , HKCURUN , RUNONCE , LOADKEY , STARTUP .
14:remote Sets a remote type .
We are only aware of one remote type that instructs Kazuar to act as an HTTP server and allow the threat actor to interact with the compromised system via inbound HTTP requests .
15:info	Gathers system information , specifically information referred to as : Agent information , System information , User information , Local groups and members , Installed software , Special folders , Environment variables , Network adapters , Active network connections , Logical drives , Running processes and Opened windows .
16:copy	Copies a specified file to a specified location .
Also allows the C2 to supply a flag to overwrite the destination file if it already exists .
17:move	Moves a specified file to a specified location .
Also allows the C2 to supply a flag to delete the destination file if it exists .
18:remove Deletes a specified file .
Allows the C2 to supply a flag to securely delete a file by overwriting the file with random data before deleting the file .
19:finddir Find a specified directory and list its files , including the created and modified timestamps , the size and file path for each of the files within the directory .
20:kill	Kills a process by name or by process identifier ( PID ) .
21:tasklisk	List running processes .
Uses a WMI query of “ select * from Win32_Process ” for a Windows system , but can also running “ ps -eo comm ,pid ,ppid ,user ,start ,tty ,args ” to obtain running processes from a Unix system .
22:suicide We believe this command is meant to uninstall the Trojan , but it is not currently implemented in the known samples .
23:plugin Installing plugin by loading a provided Assembly , saving it to a file whose name is the MD5 hash of the Assembly ’s name and calling a method called “ Start ” .
24:plugout Removes a plugin based on the Assembly ’s name .
25:pluglist	Gets a list of plugins and if they are “ working ” or “ stopped ” .
26:run Runs a specified executable with supplied arguments and saves its output to a temporary file .
The temporary file is up loaded to the C2 server .
As can be seen from the Table 2 above , Kazuar has an extensive command set , many of which are similar in functionality as other backdoor Trojans .
However , a few commands specific to Kazuar appear to be unique and are worth further discussion .
First , several of these commands contain checks to determine the environment in order to use appropriate paths or commands .
The ‘ tasklist ’ command will use a WMI query or the “ ps ” command , which allows Kazuar to obtain running processes from both Windows and Unix systems .
Also , Kazuar ’s ‘ cmd ’ command will run commands using “ cmd.exe ” for Windows systems and “ /bin/bash ” for Unix systems .
These two commands provide evidence that the authors of Kazuar intended to use this malware as a cross-platform tool to target both Windows and Unix systems .
Kazuar contains three commands related to plugins : plugin , plugout and pluglist .
These three commands allow an actor to administer a framework that allows Kazuar to use additional plugins .
This plugin framework provides Kazuar potentially endless functionality , as its operators can provide additional .NET applications that Kazuar can load and execute .
While many backdoor Trojans have extensive command handlers and plugin frameworks , Kazuar ’s ‘ remote ’ command provides a functionality that is rarely seen in backdoors used in espionage campaigns .
This command instructs the Trojan to start a thread to listen for inbound HTTP requests , which effectively turns Kazuar into a webserver .
This functionality provides an API for the Trojan to run commands on the compromised system .
To initiate this functionality , the actor will issue the ‘ remote ’ command and provide a list of URI prefixes that Kazuar ’s HTTP listener will process and respond to .
The URI prefix supplied by the actor would be added to the “ Prefixes ” property of the HttpListener class , which requires a schema , a host , an optional port and optional path .
The actor would then issue HTTP requests to URLs that match these URI prefixes using specific methods , specifically OPTIONS , POST , GET and PUT methods to interact with the compromised system using Kazuar ’s command set seen in Table 3 .
This functionality flips the communication flow between the Trojan and the C2 server .
Instead of the Trojan initiating communications with its C2 server , the C2 server sends requests directly to the Trojan .
This communications flow is important if the compromised system is a remotely accessible server that may raise flags when initiating outbound requests .
Also , by creating this type of API access , the threat actors could use one accessible server as a single point to dump data to and exfiltrate data from .
OPTIONS No functionality , just responds with an HTTP “ OK ” status .
POST Actor provides XML formatted data that Kazuar will use to create a new task .
Uses the exact same method to parse the XML data obtained in the initial C2 communications channel discussed earlier .
Kazuar writes the results of the task to a log file that it references as “ res ” within a folder referenced as “ tsk ” .
GET	Provides the contents of the results of the previous task created via the HTTP POST request that is stored in the “ res ” file .
PUT	Actor provides XML formatted data that Kazuar will use to create a new task .
This method is similar to the POST method , however , instead of saving the results of the command to a “ res ” file it responds to the HTTP PUT request with the results of the command .
While yet another fully featured backdoor alone is not particularly novel , the existence of a code path for Unix , combined with the portability of .NET Framework code makes the Kazuar Trojan an interesting tool to keep an eye on .
Another interesting portion of this malware is its remote API that allows actors to issue commands to the compromised system via inbound HTTP requests .
Based on our analysis , we believe that threat actors may compile Windows and Unix based payloads using the same code to deploy Kazuar against both platforms .
Palo Alto Networks AutoFocus subscribers can explore additional samples using the Kazuar AutoFocus tag .
Kazuar : 8490daab736aa638b500b27c962a8250bbb8615ae1c68ef77494875ac9d2ada2 .
Kazuar : b51105c56d1bf8f98b7e924aa5caded8322d037745a128781fa0bc23841d1e70 .
Kazuar : bf6f30673cf771d52d589865675a293dc5c3668a956d0c2fc0d9403424d429b2 .
Kazuar : cd4c2e85213c96f79ddda564242efec3b970eded8c59f1f6f4d9a420eb8f1858 .
Kazuar : http://gaismustudija.lv/wp-includes/pomo/kontakti.php .
Kazuar : http://hcdh-tunisie.org/wp-includes/SimplePie/gzencode.php .
Kazuar : http://www.gallen.fi/wp-content/gallery/ .
Kazuar : %LOCALAPPDATA%\/[a-f0-9]{32}\/[a-f0-9]{32}\.dll .
Kazuar : %LOCALAPPDATA%\/[a-f0-9]{32}\/[a-f0-9]{32}/ .
Kazuar : %USERPROFILE%\Start Menu\Programs\Startup\*.lnk .
