The Gamaredon Group Toolset Evolution .
Release_Time : 2017-02-27
Report_URL : https://unit42.paloaltonetworks.com/unit-42-title-gamaredon-group-toolset-evolution/
Unit 42 threat researchers have recently observed a threat group distributing new , custom developed malware .
We have labelled this threat group the Gamaredon Group and our research shows that the Gamaredon Group has been active since at least 2013 .
In the past , the Gamaredon Group has relied heavily on off-the-shelf tools .
Our new research shows the Gamaredon Group have made a shift to custom-developed malware .
We believe this shift indicates the Gamaredon Group have improved their technical capabilities .
The custom-developed malware is fully featured an includes these capabilities : 
A mechanism for downloading and executing additional payloads of their choice .
The ability to scan system drives for specific file types .
The ability to capture screenshots .
The ability to remotely execute commands on the system in the user ’s security context .
The Gamaredon Group primarily makes use of compromised domains , dynamic DNS providers , Russian and Ukrainian country code top-level domains ( ccTLDs ) , and Russian hosting providers to distribute their custom-built malware .
Antimalware technologies have a poor record of detecting the malware this group has developed .
We believe this is likely due to the modular nature of the malware , the malware ’s heavy use of batch scripts , and the abuse of legitimate applications and tools ( such as wget ) for malicious purposes .
Previously , LookingGlass reported on a campaign they named “ Operation Armageddon , ” targeting individuals involved in the Ukrainian military and national security establishment .
Because we believe this group is behind that campaign , we ’ve named them the Gamaredon Group , an anagram of “ Armageddon ” .
At this time , it is unknown if the new payloads this group is distributing is a continuation of Operation Armageddon or a new campaign .
The earliest discovered sample ( based on compile times and sandbox submission times ) distributed by this threat group resembles the descriptions of Gamaredon provided by Symantec and Trend Micro .
Unfortunately , this identification is rather tenuous , as it seems to only identify the first variant of payloads used by our threat actors .
Some samples of later payload variants also have been given the generic and brittle names of TROJ_RESETTER.BB and TROJ_FRAUDROP.EX .
Originally , the payloads delivered to targets by this threat group consisted of a password protected Self-extracting Zip-archive ( .SFX ) file which , when extracted , wrote a batch script to disk and installed a legitimate remote administration tool called tool Remote Manipulator System which they would abuse for malicious purposes .
One such self-extracting archive ( ca87eb1a21c6d4ffd782b225b178ba65463f73de6f4c736eb135be5864f556dc ) was first observed around April of 2014 .
The password ( reused by many of the password protected SFX payloads ) it used to extract itself is “ 1234567890__ ” .
The files included in this SFX file we observed include a batch file named “ 123.cmd ” and another SFX named “ setting.exe ” .
This second SFX contains a .MSI installer package which installs Remote Manipulator System and a batch script which handles the installation .
Later payloads would write batch scripts to disk as well as wget binaries .
The batch scripts would use the wget binaries to download and execute additional executables .
The scripts would also use wget to send POST requests to command and control ( C2 ) servers that would contain information about the compromised system .
Some of these payloads included decoy documents that would open when the malware is executed .
Three examples of this type of payload include . 
payload : a6a44ee854c846f31d15b0ca2d6001fb0bdddc85f17e2e56abb2fa9373e8cfe7 .
payload : b5199a302f053e5e9cb7e82cc1e502b5edbf04699c2839acb514592f2eeabb13 .
payload : 3ef3a06605b462ea31b821eb76b1ea0fdf664e17d010c1d5e57284632f339d4b .
We first observed these samples using wget in 2014 .
The filenames and decoy documents these samples used attempt to lure individuals by using the presidential administration of Ukraine , Ukrainian national security and defense , the Anti-Terrorist Operation Zone in the Ukraine , and Ukrainian patriotism as subjects .
Other observed payloads would , again , use SFX files to deliver a batch script and an executable that allowed remote access through the VNC protocol .
These VNC exectuables would either be included in the SFX file or downloaded by the batch script .
We found one URL ( now taken down ) that hosted a VNC executable that the malware would attempt to download and install at hxxp://prestigeclub.frantov.com.ua/press-center/press/chrome-xvnc-v5517.exe .
The batch script would then attempt to have the VNC program connect to a command and control ( C2 ) server to enable the server to control the compromised system .
All VNC installations on compromised systems that we observed have used the same configuration file , RC4 key file , and passwords .
One such sample , cfb8216be1a50aa3d425072942ff70f92102d4f4b155ab2cf1e7059244b99d31 first appeared around January of 2015 .
The path configured in the VNC configuration file across all implants employing VNC ( UltraVNC.ini ) is “ Y:\ПРОБА\Создание троянов\создание RMS\vnc ” .
This isn’t the only place hardcoded Cyrillic file paths are used by implants .
Many of the batch scripts also use hardcoded paths such as “ Главное меню\Программы\Автозагрузка ” .
Many payloads also include a VBS script which raises a dialog box to the users asking them to run the malware again .
It reads , “ Ошибка при инициализации приложения ( 0xc0000005 ) .
Повторить попытку открытия файла? ” ( English Translation from Russian : Application failed to initialize ( 0xc0000005 ) .
Try to open the file again? ) .
Some of the SFX files also include another legitimate application called ChkFlsh.exe ( 8c9d690e765c7656152ad980edd2200b81d2afceef882ed81287fe212249f845 ) .
This application was written by a Ukrainian programmer and is used to check performance of USB flash drives .
Its value to the attackers to the attackers isn’t clear but one possibility is that it is somehow used to steal or monitor files on USB devices .
In our research , we found this application present in some SFX files along with VNC programs and in some SFX files that didn’t have VNC programs included .
While the most recent samples observed still use batch scripts and SFX files , the Gamaredon Group has moved away from applications like wget , Remote Manipulator Tool , VNC and ChkFlsh.exe .
Instead of using wget the attackers are distributing custom developed downloaders , and instead of Remote Manipulator or VNC the malware is using a custom developed remote access implant .
In June of 2015 a custom downloader used by many newer samples was first seen in the wild and is often included in SFX implants with the name “ LocalSMS.dll ” .
This downloader makes requests to adobe.update-service.net ( hardcoded in the sample ) and is further discussed in Appendix A .
In February 2016 , another custom tool now often included in SFX implants was seen in the wild .
This SFX file ( 3773ddd462b01f9272656f3150f2c3de19e77199cf5fac1f44287d11593614f9 ) contains a new Trojan ( 598c55b89e819b23eac34547ad02e5cd59e1b8fcb23b5063a251d8e8fae8b824 ) we refer to as “ Pteranodon. ” Pteranodon is a custom backdoor which is capable of the following tasks : 
Capturing screenshots at a configurable interval and uploading them to the attacker .
Downloading and executing additional files .
Executing arbitrary commands on the system .
The earliest version of Pteranodon uses a hardcoded URL for command and control .
It sends POST requests to “ msrestore.ru/post.php ” using a static multipart boundary .
Newer versions of the tool also use hardcoded domains and multipart boundaries .
They also share similar pdb strings .
Other Pteranodon samples can be found in AutoFocus using the Pteranodon tag .
The most recent variant of Pteranodon is analyzed in Appendix A .
We have only identified one delivery vector for the new implants thus far .
A Javascript file ( f2355a66af99db5f856ebfcfeb2b9e67e5e83fff9b04cdc09ac0fabb4af556bd ) first seen in December of 2016 downloads a resource from http://samotsvety.com.ua/files/index.pht ( likely a compromised site used for staging payloads ) which previously an SFX file ( b2fb7d2977f42698ea92d1576fdd4da7ad7bb34f52a63e4066f158a4b1ffb875 ) containing two of the Gamaredon custom tools .
A related sample ( e24715900aa5c9de807b0c8f6ba8015683af26c42c66f94bee38e50a34e034c4 ) used the same distinct Mutex and contains a larger set of tools for analysis .
The original name of the file is “ AdapterTroubleshooter.exe ” and the file uses icons which resemble those used by OpenVPN .
Upon examining the sample ’s file activity within AutoFocus it is clear the sample is a self-extracting executable .
Opening the sample with 7zip inside of a virtual machine , all the files contents can be examined .
400f53a89d08d47f608e1288d9873bf8d421fc7cd642c5e821674f38e07a1501 : LocalSMS.dll Wed Apr 29 08:10:30 2015 c:\users\viber\documents\visual studio 2013\projects\contextmenu\release\contextmenu.pdb .
d01df47b6187631c9a93bdad1298439ab1a1c5529b3319f3614b6ec2455e5726 : MpClients.dll Thu Sep 08 05:01:00 2016 c:\users\user\documents\visual studio 2015\projects\updaterv1\release\updaterv1.pdb .
f2296bcb6be68dfb330baec2091fb11a42a51928ba057164213580e6ff0e1126 : OfficeUpdate.dll Wed Dec 07 09:25:57 2016 .
2ded2f3b5b5b6155ce818893c67887cbfa8b539be6c983e314ccf2177552da20 : SmartArtGraphicsLog.lnk .
46a39da996b01e26ddd71d51c9704de2aa641cd3443f6fe0e5c485f1cd9fa65d : UsrClass.lnk .
a972ad0ddc00d5c04d9fe26f1748e12008efdd6524c9d2ea4e6c2d3e42d82b7b : condirs.cmd .
37c78ee7826d63bb9219de594ed6693f18da5db60e3cbc86795bd10b296f12ac :w inrestore.dll Mon Jan 09 03:12:39 2017 c:\develop\ready\winrestore – proxy\release\winrestore.pdb .
90ba0f95896736b799f8651ef0600d4fa85c6c3e056e54eab5bb216327912edd : wmphost.exe Thu Dec 01 08:23:32 2016 c:\develop\ready\mouse-move\mouse-move\release\mouse-move.pdb .
The bootstrapping logic for the sample relies on the contents of “ condirs.cmd ” .
Briefly , the logic within “ condirs.cmd ” follows : 
1 .
Ensure “ %LOCALAPPDATA%\Microsoft\Windows\ ” exists .
2 .
Kill and delete processes , files , and scheduled tasks which may interfere with the sample executing .
3 .
Copy “ winrestore.dll ” to “ %LOCALAPPDATA%\Microsoft\Windows\UsrClass.dat{4f6fe187-7034-11de-b675-001d09fa5win}.dll ” .
4 .
Copy “ OfficeUpdate.dll ” to “ %LOCALAPPDATA%\Microsoft\Windows\UsrClass.dat{4f6fe187-7034-11de-b675-001d09fa5off}.dll ” .
5 .
Determine if the operating system is Windows XP or Windows 7 .
6 .
If the system is running Windows XP .
a .
Set the directory to copy files into as “ %WINDIR%\Setup\State\Office ” .
b .
Copy “ UsrClass.lnk ” to “ %USERPROFILE%\Главное меню\Программы\Автозагрузка\ ” .
c. Copy “ SmartArtGraphicsLog.lnk ” to “ %USERPROFILE%\Главное меню\Программы\Автозагрузка\ ” .
7 .
If the system is running Windows 7 .
a .
Set the directory to copy files into as “ %APPDATA%\Microsoft\Office ” .
b .
Copy “ UsrClass.lnk ” to “ %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\ ” .
c. Copy “ SmartArtGraphicsLog.lnk ” to “ %APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\ ” .
8 .
Copy “ winrestore.dll ” to the directory set in step 6 or 7a with the filename “ MSO1234.win ” .
9. copy “ LocalSMS.dll ” to the directory set in step 6 or 7a with the filename “ MSO1567.dls ” .
10. copy “ OfficeUpdate.dll ” to the directory set in step 6 or 7a with the filename “ MSO5678.usb ” .
11. copy “ MpClients.dll ” to the directory set in step 6 or 7a with the filename “ MSO8734.obn ” .
12 .
Execute the exported function “ updater ” within “ MSO1234.win ” using rundll32.exe .
13 .
Execute the exported function “ EntryPoint ” within “ MSO1567.dls ” using rundll32.exe .
It should be noted that “ UsrClass.lnk ” links to “ %WINDIR%\system32\rundll32.exe UsrClass.dat{4f6fe187-7034-11de-b675-001d09fa5win}.dll ,updater ” and “ SmartArtGraphicsLog.lnk ” links to “ C:\WINDOWS\system32\rundll32.exe UsrClass.dat{4f6fe187-7034-11de-b675-001d09fa5off}.dll ,StartBackup ” .
These are the locations “ winrestore.dll ” and “ OfficeUpdate.dll ” were copied to in steps 3 and 4 , respectively .
The “ condirs.cmd ” script then continues to : 
1 .
Schedule the following tasks : 
a .
Task name “ UpdatesWinRes ” , invoke “ MSO1234.win ,updater ” .
b .
Task name “ UpdatesWinDLL ” , invoke “ MSO1567.dls ,EntryPoint ” .
c. Task name “ UpdatesWinUSBOOK ” , invoke “ MSO5678.usb ,StartBackup ” .
d. Task name “ UpdatesWinOBN ” , invoke “ MSO8734.obn ,bitDefender ” .
2 .
Ensure the directory “ %Temp%\reports\ProfileSkype\ ” exists .
3 .
Kill processes named “ skype.exe ” .
4 .
Copy the contents of “ %AppData%\Skype ” to “ %Temp%\reports\ProfileSkype\ ” .
5 .
Create subdirectories under “ %Temp%\reports\%COMPUTERNAME\ ” with names : Z W P S V Q N M L K I J F H E G and D. These are drive letters .
6 .
Copy all files from all above drive letters with extensions “ doc ” , “ docx ” , “ xls ” , “ xlsx ” , “ rtf ” “ odt ” and “ txt ” into “ %TEMP%\reports\%COMPUTERNAME%\%%d\ ” where %%d is the drive letter .
7 .
Copy all files with the above extensions from all users ’ “ Desktop ” , “ Documents ” , and “ Downloads ” folders to “ %TEMP%\reports\%COMPUTERNAME%\Desktop\ ” , “ %TEMP%\reports\%COMPUTERNAME%\Documents\ ” and “ %TEMP%\reports\%COMPUTERNAME%\Downloads\ ” respectively .
8 .
Execute the exported function “ StartBackup ” within “ MSO5678.usb ” using rundll32.exe .
9 .
Execute the exported function “ bitDefender ” within “ MSO8734.obn ” using rundll32.exe .
10 .
Clean up temporary files , sleep , and delete itself .
When this script has completed , a series of implants giving the attacker the ability to steal files , capture screenshots and evade detection are deployed on the system .
These individual implants are analyzed in detail in Appendix A .
While the payloads used to control compromised systems have evolved over time , many commonalities appear across the samples .
While not every sample distributed by this group is described in this blog , hashes of the known samples are included in the Indicators of Compromise section .
Some interesting behaviors from a few of the related samples include : 
Many of the batch scripts include misspellings of common English words .
One such example is the filename “ cmd ” .
While another example , “ domen ” , is used as a variable name in a batch script which is likely meant to be “ domain ” .
Almost all batch scripts in all samples ping localhost as a means of sleeping .
Many of the batch scripts are named “ cmd ” and some include the string “ Trons_ups ” and “ Treams ” .
Many of the batch scripts use the same commands for determining operating system version .
Many of the early samples used applications such as wget , UltraVNC , and ChkFlash .
These utilities have been replaced with custom tools in the latest sample
Samples employing VNC used the same configuration and passwords .
Additionally , the infrastructure used by this group has not changed much in the past three years .
Many of the samples reused the same domains for implant communication .
Also , many of the custom developed tools use hardcoded network locations .
Monikers used for filenames , exported DLL functions , domains , and variable names in scripts seem to be themed and consistent .
By pivoting on indicators from one of the SFX implants within AutoFocus additional samples are easily identified by overlaps in these consistencies .
Most samples were delivered in a similar fashion : an SFX dropping resources which are staged and loaded with a batch and/or VBS script .
The reuse of SSL certificates between IPv4 addresses as well as the reuse of IPv4 addresses between domains names is apparent when viewing a large collection of entities involved in this campaign .
The implants identified have limited , generic , and often conflicting detections on VirusTotal .
The threat group using these implants has been active since at least 2014 and has been seen targeting individuals likely involved in the Ukrainian government .
Some of the samples share delivery mechanisms and infrastructure with samples which are detected by a few antivirus vendors as Gamaredon .
However , newer variants deliver more advanced malware which goes unnamed .
Periodically , researchers at Palo Alto Networks hunt through WildFire execution reports , using AutoFocus , to identify untagged samples ’ artifacts in the hopes of identifying previously undiscovered malware families , behaviors , and campaigns .
This blog presents a threat group identified by the above process using AutoFocus .
By actively hunting for malicious activity and files instead of waiting for alerts to triage , defenders can identify and building protections for new trends before they arrive on their corporate networks and endpoints .
More details about this threat group can be found in the AutoFocus tag GamaredonGroup .
Palo Alto Networks customers are protected from this threat in the following ways : 
WildFire identifies the malware described in this report as malicious .
Traps prevents execution of the malware described in this report .
The C2 domains used by this group are blocked through Threat Prevention .
Special thanks go out to Tom Lancaster for both his assistance in this investigation and for his charming good looks .
This file is a USB file stealer which can be also guessed by its internal name “ USBgrabber.dll ” .
However , the implementation is sloppy which makes it a file stealer for any newly connected logical volume on a system .
This is because the malware monitors the computer for messages WM_COMMAND and WM_DEVICECHANGE , but not verifying if a USB drive was connected .
The malware creates two mutexes “ __Wsnusb73__ ” and “ __Wsnusbtt73__ ” .
Then , it creates the following folder in the temp path of the local user : “ C:\Users\<Username>\AppData\Local\Temp\reports ” 
This folder is used as a temporary location to copy all files from a newly connected logical drive to and upload them to the C2 server .
The files are transferred to the hardcoded C2 server “ 195.62.52.93 ” one by one via HTTP POST method .
The malware also creates a SQLite database named “ asha.dat ” in the local users temp folder .
Therein , it keeps track of files which were stolen by calculating the MD5 hash of the filename followed by the file length .
Therefore , it creates a Unicode string of the original file path from the drive and concatenates the file size in bytes to it .
Finally , it uses the API functions MD5Init() , MD5Update() and MD5Final() to calculate the hash and store it in the database .
It should be noted , that only hashes of files are added to the database that don’t have the following extensions : 
DLL BIN CAB EXE ISO .
This file is essentially a simple downloader which contacts the C2 server to send some user data and get an executable as response which will be executed .
The DLL is written in C++ and contains all of the functionality is in an export function named “ EntryPoint ” .
The file was compiled without any compiler or linker optimizations , thus the big file size and the remaining PDB path string .
At first , the malware retrieves the temp path of the local user ( “ C:\Users\<Username>\AppData\Local\Temp\ ” ) , the computer name ( e.g .
“ WIN-MLABCSUOVJB ” ) , the hardware profile GUID ( e.g .
“ {826ee360-7139-11de-8d20-808e6f6e6263} ” ) and the volume serial number of C:\ drive ( e.g .
“ 1956047236 ” ) .
Next , it takes the following hardcoded string : http://adobe.update-service.net/index.php?comp=
To create a URL string with the victims information for contacting the C2 server : http://adobe.update-service.net/index.php?comp=WIN-MLABCSUOVJB&id=WIN-MLABCSUOVJB_{826ee360-7139-11de-8d20-808e6f6e6263}1956047236
To create the filename where the downloaded file will be saved , the malware tries to build a random string of 10 characters .
However , due to an implementation error the string always ends up being the same , namely “ frAQBc8Wsa ” .
This string gets concatenated with the retrieved local users temp path to the following file path : C:\Users\<Username>\AppData\Local\Temp\frAQBc8Wsa
Then , it uses the API function URLDownloadToFileA() to download a payload to disk and executes it via CreateProcess() .
Finally , it sleeps for 60 seconds before terminating the payload and the DLL exits .
This file is a slightly more advanced version of LocalSMS.dll downloader .
Instead of downloading a payload directly to disk , this file requests a download command from the C2 server which contains the actual payload URL to be used .
Therefore , it uses a basic network implementation based on the Winsock functions .
All the functionality of this DLL is put into an export function named “ bitDefender ” .
It creates a socket , requests the address of the hardcoded C2 server “ win-restore.ru ” via gethostbyname() and connects to it .
Thereafter , it also collects the volume serial number of C:\ drive , the computer name and the hardware profile GUID .
The response will be stored into a memory buffer via recv() and scanned for the string “ urltoload={ “ .
As the name suggests , the received data contains the actual URL of the payload inside curly brackets .
The URL gets pulled out of the string and is used again as input for the API function URLDownloadToFile() .
Again , the same file path will be used to store the payload on disk and execute it : “ C:\Users\<Username>\AppData\Local\Temp\frAQBc8Wsa ” 
Pteranodon is a backdoor which also can capture screenshots based on a configuration file created on the disk .
Further , it uploads the screenshots to the C2 server unencrypted .
All the functionality of this DLL is put into an export function named “ updater ” .
At first , it retrieves the %APPDATA% folder of the local user to build the following file path : “ C:\Users\<Username>\AppData\Roaming\Microsoft\desktop.ini ” 
Then , it checks if the file already exists and continues execution if so .
If not , it runs a routine which checks if there is mouse movement as an anti-sandbox technique .
If no mouse movement is detected the malware runs in an infinite loop checking for mouse movement .
If the file “ desktop.ini ” does not exist , the malware creates it and writes the following information into it : ” interval={60} msfolder={10} status={0} ” 
This information is used as configuration data to create the screenshots .
There are also other commands possible which can be retrieved from the C2 server .
The following commands are available : 
exec={
This command is used to download and execute a payload from a URL present in the curly brackets .
It creates a random file path in temp folder , calls URLDownloadToFile() and CreateProcess() to run the payload .
Then , it waits 30s and terminates the payload .
interval={
This command is used to define the interval in seconds between the creation of two or more screenshots .
msfolder={
This command defines the number of screenshots to create .
command={ / command_c={
This command is used to execute a file present as a string between the curly brackets .
The variant with the “ c ” uses the Windows tool cmd.exe with help of ShellExecute() .
status={
This command contains the flag which defines if screenshots should be made ( “ 1 ” ) or not ( “ 0 ” ) .
Next , it checks for a mutex named “ asassin1dj ” to verify if the system is already infected .
Next , it creates the following folder , if not already present : “ C:\Users\<Username>\AppData\Roaming\Microsoft\store ” 
Next , according to the configuration data in “ desktop.ini ” it constantly creates 24-bit color depth JPEG screenshots without extension in the store folder with help of GDI32 and gdiplus API functions .
The following file naming scheme for the screenshots is used : <year><month><day>_<hour><minute><seconds>
After the last screenshot was created , it uploads all files from the “ store ” folder to the C2 server “ win-restore.ru ” .
Then , it deletes all the files present in the folder and starts a new screenshot creation cycle .
It should be noted that there is no check of what files are uploaded .
The files are uploaded via POST HTTP method to the script “ vvd.php ” .
Finally , it checks if any new command information is available from the C2 server and updates the “ desktop.ini ” file according to it .
Based on functionality , compile timestamps , and binary differencing this malware is likely an updated version of 598c55b89e819b23eac34547ad02e5cd59e1b8fcb23b5063a251d8e8fae8b824 .
This file runs an infinite loop until mouse movement gets detected , then it exits .
This file can be used to circumvent sandboxes that don’t simulate mouse movement .
To detect if it ’s running inside a sandbox , another file can scan the list of running processes to see if “ wmphost.exe ” is present or not .
Gamaredon : admin-ru.ru .
Gamaredon : adobe.update-service.net .
Gamaredon : apploadapp.webhop.me .
Gamaredon : brokbridge.com .
Gamaredon : cat.gotdns.ch .
Gamaredon : check-update.ru .
Gamaredon : http://childrights.in.ua/public/manager/img/scrdll.ini .
Gamaredon : http://prestigeclub.frantov.com.ua/press-center/press/chrome-xvnc-v5517.exe .
Gamaredon : http://umachka.ua/screen/dk.tmp .
Gamaredon : http://umachka.ua/screen/screen.tmp .
Gamaredon : http://viberload.ddns.net/viber.nls .
Gamaredon : 002aff376ec452ec35ae2930dfbb51bd40229c258611d19b86863c3b0d156705 .
Gamaredon : 08e69f21c3c60a4a9b78f580c3a55d4cfb74729705b5b7d01c1aecfd58fc49e6 .
Gamaredon : 0c47cf984afe87a14d0d4c94557864ed19b4cb52783e49ce96ebf9c2f8b52d27 .
Gamaredon : 0dc1010c3d3766158e2347d10fc78d9223c6e0e3a44aa8a76622aeff7d429ab9 .
Gamaredon : 0f745512940e0efd8f09c6d862571cba2b98fac9a9f7cf30dedcc08ace43a494 .
Gamaredon : 145dab86a43835bb37734c16756d6d64d8e5ac6b87c491c57385e27b564136b8 .
Gamaredon : 026be8a873560f1496c6961f6e36c312bdda01beacb17c4b744f35ee1923d061 .
Gamaredon : 03c943f5cba11b09b9c3afa0705d4a027e5a9d81b299711740cc5aedfe4b4aa1 .
Gamaredon : 03e5e99cc8280de4663c4b65bfd26782d4975258808a63a4b20bc068008df7f5 .
Gamaredon : 059e40ba91b2b2d827c200476fcbd0fad0d43ab198d0c206c996777d27e6de65 .
Gamaredon : 0669e61e51cf43daa431d52b5461c90bdce1b1bee03b087e4406c30264dcb9a4 .
Gamaredon : 068b9a9194efacc16cf142814e79b7041b6ab3d671a95bb508dbd30061c324aa .
