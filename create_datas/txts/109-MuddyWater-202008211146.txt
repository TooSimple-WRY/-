MuddyWater expands operations .
Release_Time :  2020-10-10 .
Report_URL :  https://securelist.com/muddywater/88059/ .
MuddyWater is a relatively new APT that surfaced in 2017 .
It has focused mainly on governmental targets in Iraq and Saudi Arabia , according to past telemetry .
However , the group behind MuddyWater has been known to target other countries in the Middle East , Europe and the US .
We recently noticed a large amount of spear phishing documents that appear to be targeting government bodies , military , telcos and educational institutions in Jordan , Turkey , Azerbaijan and Pakistan , in addition to the continuous targeting of Iraq and Saudi Arabia , other victims were also detected in Mali , Austria , Russia , Iran and Bahrain . .
These new documents have appeared throughout 2018 and escalated from May onwards .
The attacks are still ongoing .
The new spear-phishing docs used by MuddyWater rely on social engineering to persuade users to enable macros .
The attackers rely on a range of compromised hosts to deliver their attacks .
In the advanced stages of this research , we were able not only to observe additional files and tools from the attackers ’ arsenal but also some OPSEC mistakes made by the attackers .
Previous related research : 
https://sec0wn.blogspot.com/2018/05/clearing-muddywater-analysis-of-new.html?m=1
https://reaqta.com/2017/11/muddywater-apt-targeting-middle-east/
https://blog.malwarebytes.com/threat-analysis/2017/09/elaborate-scripting-fu-used-in-espionage-attack-against-saudi-arabia-government_entity/
https://www.sekoia.fr/blog/falling-on-muddywater/ .
Below is a description of the malware extraction and execution flow , starting from the initial infection vector , running VBA code via a macro and then dropping the PowerShell code that establishes command-center communications , sends victim system information and then receives commands supported by the malware .
The initial infection starts with macro-enabled Office 97-2003 Word files whose macros are usually password-protected to hinder static analysis .
Malicious obfuscated VBA code is executed when the macro is first enabled .
In some cases , the malicious macro is also executed when the user activates a fake text box .
The macro payload , which is Base64 encoded , does the following :
 Drops two or three files into the “ ProgramData ”  folder .
The dropped files are either in the root of the “ ProgramData ”  folder or in a subdirectory .
The file names may vary from one version of the malware to another .
Adds a registry entry in the current user ’s RUN key ( HKCU ) for later execution when the user next logs in .
In some cases , the macro spawns the malicious payload/process instantly without waiting for the next time the user logs in .
The registry keys and executables may vary from one version of the malware to another .
The next time the user logs in , the dropped payload will be executed .
The executables have been chosen specifically for bypassing whitelisting solutions since they are all from Microsoft and very likely whitelisted .
Regardless of the file extensions , the files dropped by the macro are EITHER INF , SCT and text files OR VBS and text files .
INF is launched via the advpack.dll “ LaunchINFSection ”  function .
INF registers the SCT file ( scriptlet file ) via scrobj.dll ( Microsoft Scriptlet library ) .
Via WMI ( winmgmt ) , the JavaScript or VBscript code in the SCT file spawns a PowerShell one-liner which finally consumes the text file .
The VBS file decodes itself and calls mshta.exe , passing on one line of VBScript code to it , which in turn spawns a PowerShell one-liner which finally consumes the text file ( usually Base64-encoded text ) .
When PowerShell is invoked whether via WMI , wscript.exe , or mshta.exe , it executes a one-liner PowerShell code ( as outlined above ) that reads the encoded text file dropped in ProgramData and then decodes it .
The resulting code has multiple layers of obfuscation .
The first thing the PowerShell code does is to disable office “ Macro Warnings ”  and “ Protected View ”  .
This is to ensure future attacks don’t require user interaction .
It also allows macro code to access internal VBA objects for stealthier macro code execution in future attacks .
Next , it checks the running processes against a list of hard-coded process names ;  if any are found , the machine is forcefully rebooted .
The names are linked to various tools used by malware researchers .
In some cases , it calculates the checksum of each running process name , and if it matches any hard-coded checksums , it causes a BSOD via the ntdll.dll “ NtRaiseHardError ”  function .
A URL is selected at random from a long list of embedded URLs held in an array named $dragon_middle .
The selected URL is subsequently used for communication with the CnC server .
If it can’t send data to the chosen CnC URL , it tries to obtain another random URL from $middle_dragon , then sleeps from one to 30 seconds and loops again .
The code then tries to obtain the victim ’s public IP via “ https://api.ipify.org/ ”  .
The public IP is then POSTed along with OS Version , Internal IP , Machine Name , Domain Name , UserName after being encrypted to the previously chosen URL to register a new victim .
This allows the attackers to accept or reject victims depending on their IPs , countries , geolocations , target enterprises , etc .
Depending on the response from the attacker ’s CnC , the victim is assigned an ID $sysid .
This ID is sent to the CnC with each request for commands to execute .
“ upload ”  , “ screenshot ”  , “ Excel ”  , “ Outlook ”  , “ risk ”  , “ reboot ”  , “ shutdown ”  , “ clean ”  .
These commands vary from one version to another .
The “ screenshot ”  command takes a screenshot that is saved as a.PNG file in “ ProgramData ”  .
The “ Excel ”  command receives another stage of the PowerShell code , saves it in “ c:\programdata\a.ps1 ”  and then asks Excel to execute this PowerShell script via DDE .
The “ Outlook ”  command receives another stage of the PowerShell code , saves it in “ c:\programdata\a.ps1 ”  and then asks Outlook via COM , via MSHTA.exe , to execute it .
The “ risk ”  command receives another stage of the PowerShell code , saves it in “ c:\programdata\a.ps1 ”  and then asks Explorer.exe via COM interaction to execute it .
The “ upload ”  command downloads files from the CnC and saves them locally in “ C:\ProgramData ”  .
The “ clean ”  command destroys the victim ’s disk drives C , D , E , F and then reboots .
The “ reboot ”  and “ shutdown ”  commands immediately reboot and shut down the victim ’s machine .
In one version of the malware , the code checks if the “ ProgramData ”  folder has folders or files with the keywords “ Kasper ”  , “ Panda ”  , or “ ESET ”  .
Most victims of MuddyWater were found in Jordan , Turkey , Iraq , Pakistan , Saudi Arabia , Afghanistan and Azerbaijan .
Other victims were also recorded in Russia , Iran , Bahrain , Austria and Mali .
The malicious decoy documents used in the attacks suggest they are geopolitically motivated , targeting sensitive personnel and organizations .
The deobfuscated PowerShell code used by the MuddyWater group resembles previously seen PowerShell scripts that most likely served as prototypes .
Multiple documents used in the attacks also contain embedded paths from their authors ’ machines .
These paths are embedded by Office under various circumstances , for instance , when somebody adds a binary object ( an OLE control , e.g .
text box or command button ) into a Word document .
The paths discovered are :  
C:\Users\leo\AppData\Local\Temp\Word8.0\MSForms.exd .
C:\Users\poopak\AppData\Local\Temp\Word8.0\MSForms.exd .
C:\Users\Vendetta\AppData\Local\Temp\Word8.0\MSForms.exd .
C:\Users\Turk\AppData\Local\Temp\Word8.0\MSForms.exd .
Leo , Poopak , Vendetta and Turk are the usernames of those creating the documents or the templates on which they are based .
Turk could point to a person of Turkish origin .
Poopak is a Persian girl ’s name or might suggest the authors are not entirely happy with “ Pak ”  , which could be short for Pakistan .
Leo could be one of the attacker ’s names .
We also don’t rule out the possibility of false flags , with the attackers using random usernames to confuse researchers .
In multiple instances , we have also found Chinese text inside the samples , possibly indicating the reuse of code by the attackers .
Chinese text found in PowerShell code in multiple samples :  Unable to connect to the URL , please wait for the dragon… , Unable to access local computer register , Task Scheduler access denied .
We have also noticed that for some samples , e.g .
5a42a712e3b3cfa1db32d9e3d832f8f1 , the PowerShell code had only three CnC URLs , which leads us to believe that most of the CnC URLs in $dragon_middle found in other samples could actually be ‘ noise ’  to distract researchers or trigger false positives .
http://www.cankayasrc.com/style/js/main.php .
http://ektamservis.com/includes/main.php .
http://gtme.ae/font-awesome/css/main.php .
Effective protection from targeted attacks focuses on advanced detective , preventive and investigative capabilities via solutions and training , allowing an organization to control any activities on their network or suspicious files on user systems .
The best way to prevent attackers from finding and leveraging security holes , is to eliminate the holes altogether , including those related to improper system configurations or errors in proprietary applications .
Organizations are also recommended to implement the following steps for an enhanced level of protection at their premises .
Use PowerShell Constrained Language Mode as it uses IEX , Add-Type , and New-Object .
Lock PowerShell Execution Policy , must be set to “ AllSigned ”  via GPO .
A whitelisting solution to prevent certain process child-parent execution hierarchies .
The MuddyWaters group has carried out a large number of attacks and demonstrated advanced social engineering , in addition to the active development of attacks , infrastructure and the use of new methods and techniques .
The attackers are actively improving their toolkit in an effort to minimize their exposure to security products and services .
Kaspersky Lab expects these types of attacks to intensify in the near future .
In order to protect your company from malware , Kaspersky Lab researchers recommend implementing the following measures :
 Educate generic staff to be able to distinguish malicious behavior like phishing links .
Educate information security staff to have full configuration , investigative and hunting abilities .
Use a proven corporate-grade security solution in combination with anti-targeted attack solutions capable of detecting attacks by analyzing network anomalies .
Provide security staff with access to the latest threat intelligence data , which will arm them with helpful tools for targeted attack prevention and discovery , such as indicators of compromise and YARA rules .
Make sure enterprise-grade patch management processes are well established and executed .
High-profile organizations should have elevated levels of cybersecurity , attacks against them are inevitable and are unlikely to ever cease .
In the advanced stages of this research , we were able not only to observe additional files and tools from the attackers ’ arsenal but also some OPSEC mistakes made by the attackers .
Further details about the attackers ’ arsenal , additional indicators of compromise , YARA rules and attribution information is available to customers of Kaspersky Intelligence Reporting .
Contact :  intelreports@kaspersky.com .
MuddyWater :  08acd1149b09bf6455c553f512b51085 .
MuddyWater :  a9ec30226c83ba6d7abb8d2011cdae14 .
MuddyWater :  E5683fb480353c0dec333a7573710748 .
MuddyWater :  159238b473f80272fdcd0a8ddf336a91 .
MuddyWater :  16ac1a2c1e1c3b49e1a3a48fb71cc74f .
MuddyWater :  1b086ab28e3d6f73c6605f9ae087ad4a .
MuddyWater :  23c82e8c028af5c64cbe37314732ec19 .
MuddyWater :  24e1bd221ba3813ed7b6056136237587 .
MuddyWater :  2e82e242cb0684b98a8f6f2c0e8a12f3 .
MuddyWater :  37f7e6e5f073508e1ee552ebea5d200e .
MuddyWater :  3bb14adb551663fd2328d59f653ba757 .
MuddyWater :  3c2a0d6d0ecf06f1be9ad411d06f7ba8 .
MuddyWater :  4c5a5c236c9f4480b3d725f297673fad .
MuddyWater :  4f873578956d2790101443f24e4bd4d3 .
MuddyWater :  5466c8a099d1d30096775b1f4357d3cf .
MuddyWater :  59502e209aedf80e170e653306ca1553 .
MuddyWater :  5a42a712e3b3cfa1db32d9e3d832f8f1 .
MuddyWater :  5bd61a94e7698574eaf82ef277316463 .
MuddyWater :  5de97ae178888f2dd222bb8a66060ac2 .
MuddyWater :  665947cf7037a6772687b69279753cdf .
MuddyWater :  7a2ff07283ddc69d9f34cfa0d3c936d4 .
MuddyWater :  7beb94f602e97785370fec2d059d54a5 .
MuddyWater :  801f34abbf90ac2b4fb4b6289830cd16 .
MuddyWater :  864d6321be50f29e7a7a4bfab746245a .
MuddyWater :  8a36d91ca331f62642dbcafc2ea1b1ab .
MuddyWater :  9486593e4fb5a4d440093d54a3519187 .
MuddyWater :  94edf251b5fe7cc19488b5f0c3c3e359 .
MuddyWater :  %SystemDrive%\ProgramData\EventManager.dll .
MuddyWater :  %SystemDrive%\ProgramData\EventManager.logs .
MuddyWater :  %SystemDrive%\ProgramData\WindowsDefenderService.ini .
MuddyWater :  %SystemDrive%\ProgramData\Defender.sct .
MuddyWater :  %SystemDrive%\ProgramData\DefenderService.inf .
MuddyWater :  %SystemDrive%\ProgramData\WindowsDefender.ini .
MuddyWater :  %SystemDrive%\ProgramData\ZIPSDK\InstallConfNT.vbs .
MuddyWater :  %SystemDrive%\ProgramData\ZIPSDK\ProjectConfManagerNT.ini .
MuddyWater :  %SystemDrive%\ProgramData\WindowsDefenderTask.ini .
MuddyWater :  %SystemDrive%\ProgramData\WindowsDefenderTask.txt .
MuddyWater :  %SystemDrive%\ProgramData\WindowsDefenderTask.xml .
MuddyWater :  %SystemDrive%\ProgramData\DefenderNT\ConfigRegister.vbs .
MuddyWater :  %SystemDrive%\ProgramData\DefenderNT\SetupConf.ini .
MuddyWater :  %SystemDrive%\ProgramData\ASDKiMalwareSDK\ProjectConfSDK.vbs .
MuddyWater :  %SystemDrive%\ProgramData\ASDKiMalwareSDK\SetupConfSDK.ini .
MuddyWater :  %SystemDrive%\ProgramData\FirefoxSDK\ConfigRegisterSDK.ini .
MuddyWater :  %SystemDrive%\ProgramData\FirefoxSDK\ConfigRegisterSDK.vbs .
MuddyWater :  %SystemDrive%\ProgramData\OneDrive.dll .
MuddyWater :  %SystemDrive%\ProgramData\OneDrive.html .
MuddyWater :  %SystemDrive%\ProgramData\OneDrive.ini .
MuddyWater :  %SystemDrive%\ProgramData\WindowsNT\WindowsNT.ini .
MuddyWater :  %SystemDrive%\ProgramData\WindowsNT\WindowsNT.vbs .
MuddyWater :  %SystemDrive%\ProgramData\SYSTEM32SDK\ConfManagerNT.vbs .
MuddyWater :  %SystemDrive%\ProgramData\SYSTEM32SDK\ProjectConfManagerNT.ini .
MuddyWater :  %windir%\System32\Tasks\Microsoft\WindowsDefenderUpdater .
MuddyWater :  %windir%\System32\Tasks\Microsoft\MicrosoftOneDrive .
MuddyWater :  %windir%\System32\Tasks\Microsoft\WindowsDifenderUpdate .
MuddyWater :  %windir%\System32\Tasks\Microsoft\WindowsSystem32SDK .
MuddyWater :  %windir%\System32\Tasks\Microsoft\WindowsDefenderSDK .
MuddyWater :  %windir%\System32\Tasks\Microsoft\WindowsMalwareDefenderSDK .
MuddyWater :  %windir%\System32\Tasks\Microsoft\WindowsMalwareByteSDK .
MuddyWater :  http://www.cankayasrc.com/style/js/main.php .
MuddyWater :  http://ektamservis.com/includes/main.php .
MuddyWater :  http://gtme.ae/font-awesome/css/main.php .
MuddyWater :  https://www.adfg.ae/wp-includes/widgets/main.php .
MuddyWater :  http://adibf.ae/wp-includes/js/main.php .
MuddyWater :  http://hubinasia.com/wp-includes/widgets/main.php .
MuddyWater :  https://benangin.com/wp-includes/widgets/main.php .
MuddyWater :  104.237.233.60 .
MuddyWater :  104.237.255.212 .
MuddyWater :  104.237.233.40 .
MuddyWater :  5.9.0.155 .
